# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import translation_pb2 as translation__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in translation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TranslationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranslateVideo = channel.unary_stream(
                '/translation.TranslationService/TranslateVideo',
                request_serializer=translation__pb2.TranslationRequest.SerializeToString,
                response_deserializer=translation__pb2.TranslationProgress.FromString,
                _registered_method=True)
        self.GetTranslationResult = channel.unary_unary(
                '/translation.TranslationService/GetTranslationResult',
                request_serializer=translation__pb2.ResultRequest.SerializeToString,
                response_deserializer=translation__pb2.TranslationResult.FromString,
                _registered_method=True)
        self.CancelTranslation = channel.unary_unary(
                '/translation.TranslationService/CancelTranslation',
                request_serializer=translation__pb2.CancelRequest.SerializeToString,
                response_deserializer=translation__pb2.CancelResponse.FromString,
                _registered_method=True)
        self.ControlTranslation = channel.unary_unary(
                '/translation.TranslationService/ControlTranslation',
                request_serializer=translation__pb2.ControlTranslationRequest.SerializeToString,
                response_deserializer=translation__pb2.ControlTranslationResponse.FromString,
                _registered_method=True)
        self.DetectLanguage = channel.unary_unary(
                '/translation.TranslationService/DetectLanguage',
                request_serializer=translation__pb2.LanguageDetectionRequest.SerializeToString,
                response_deserializer=translation__pb2.LanguageDetectionResult.FromString,
                _registered_method=True)
        self.GetAIInsights = channel.unary_unary(
                '/translation.TranslationService/GetAIInsights',
                request_serializer=translation__pb2.AIInsightsRequest.SerializeToString,
                response_deserializer=translation__pb2.AIInsightsResponse.FromString,
                _registered_method=True)


class TranslationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TranslateVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTranslationResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTranslation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlTranslation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectLanguage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAIInsights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranslateVideo': grpc.unary_stream_rpc_method_handler(
                    servicer.TranslateVideo,
                    request_deserializer=translation__pb2.TranslationRequest.FromString,
                    response_serializer=translation__pb2.TranslationProgress.SerializeToString,
            ),
            'GetTranslationResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTranslationResult,
                    request_deserializer=translation__pb2.ResultRequest.FromString,
                    response_serializer=translation__pb2.TranslationResult.SerializeToString,
            ),
            'CancelTranslation': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTranslation,
                    request_deserializer=translation__pb2.CancelRequest.FromString,
                    response_serializer=translation__pb2.CancelResponse.SerializeToString,
            ),
            'ControlTranslation': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlTranslation,
                    request_deserializer=translation__pb2.ControlTranslationRequest.FromString,
                    response_serializer=translation__pb2.ControlTranslationResponse.SerializeToString,
            ),
            'DetectLanguage': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectLanguage,
                    request_deserializer=translation__pb2.LanguageDetectionRequest.FromString,
                    response_serializer=translation__pb2.LanguageDetectionResult.SerializeToString,
            ),
            'GetAIInsights': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAIInsights,
                    request_deserializer=translation__pb2.AIInsightsRequest.FromString,
                    response_serializer=translation__pb2.AIInsightsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'translation.TranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('translation.TranslationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TranslationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TranslateVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/translation.TranslationService/TranslateVideo',
            translation__pb2.TranslationRequest.SerializeToString,
            translation__pb2.TranslationProgress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTranslationResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/GetTranslationResult',
            translation__pb2.ResultRequest.SerializeToString,
            translation__pb2.TranslationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTranslation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/CancelTranslation',
            translation__pb2.CancelRequest.SerializeToString,
            translation__pb2.CancelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ControlTranslation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/ControlTranslation',
            translation__pb2.ControlTranslationRequest.SerializeToString,
            translation__pb2.ControlTranslationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectLanguage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/DetectLanguage',
            translation__pb2.LanguageDetectionRequest.SerializeToString,
            translation__pb2.LanguageDetectionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAIInsights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/translation.TranslationService/GetAIInsights',
            translation__pb2.AIInsightsRequest.SerializeToString,
            translation__pb2.AIInsightsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
